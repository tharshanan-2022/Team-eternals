{
  "stats": {
    "suites": 25,
    "tests": 47,
    "passes": 23,
    "pending": 0,
    "failures": 24,
    "start": "2025-09-08T16:08:02.359Z",
    "end": "2025-09-08T16:08:18.125Z",
    "duration": 15766,
    "testsRegistered": 47,
    "passPercent": 48.93617021276596,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c27afe22-8163-4860-a7d5-6383e9f57a59",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "99c715dc-a2f1-4f27-92cf-a108f60accf1",
          "title": "Authentication API",
          "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\auth.spec.cjs",
          "file": "\\tests\\api\\auth.spec.cjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Authentication API\"",
              "fullTitle": "Authentication API \"before each\" hook in \"Authentication API\"",
              "timedOut": false,
              "duration": 309,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await delay(300);",
              "err": {},
              "uuid": "1bfdfa7d-61fc-44d2-a524-ea62b0ddae86",
              "parentUUID": "99c715dc-a2f1-4f27-92cf-a108f60accf1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "22abb8b5-23e0-4478-b165-c2bf798e4692",
              "title": "POST /auth/login",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\auth.spec.cjs",
              "file": "\\tests\\api\\auth.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login user and return token with user info",
                  "fullTitle": "Authentication API POST /auth/login should login user and return token with user info",
                  "timedOut": false,
                  "duration": 521,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.post('/auth/login', {\n  email: USER_CREDENTIALS.email,\n  password: USER_CREDENTIALS.password\n});\nexpect(response.status).to.equal(200);\nexpect(response.data).to.have.property('token');\nexpect(response.data).to.have.property('user');\nexpect(response.data.user).to.have.property('email', USER_CREDENTIALS.email);\nexpect(response.data.token).to.be.a('string');",
                  "err": {},
                  "uuid": "38ebd1cf-87ed-40f4-b397-759e38127d34",
                  "parentUUID": "22abb8b5-23e0-4478-b165-c2bf798e4692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should login admin and return token",
                  "fullTitle": "Authentication API POST /auth/login should login admin and return token",
                  "timedOut": false,
                  "duration": 388,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.post('/auth/login', {\n  email: ADMIN_CREDENTIALS.email,\n  password: ADMIN_CREDENTIALS.password\n});\nexpect(response.status).to.equal(200);\nexpect(response.data).to.have.property('token');\nexpect(response.data).to.have.property('user');\nexpect(response.data.user).to.have.property('email', ADMIN_CREDENTIALS.email);\nexpect(response.data.token).to.be.a('string');",
                  "err": {},
                  "uuid": "b6c22bf4-0a8f-460d-8006-25c085337bc3",
                  "parentUUID": "22abb8b5-23e0-4478-b165-c2bf798e4692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials",
                  "fullTitle": "Authentication API POST /auth/login should return 401 for invalid credentials",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.post('/auth/login', {\n  email: 'invalid@example.com',\n  password: 'wrongpassword'\n});\nexpect(response.status).to.equal(401);\nexpect(response.data).to.have.property('error');",
                  "err": {},
                  "uuid": "62230d90-2b13-4514-86e0-7986121495c2",
                  "parentUUID": "22abb8b5-23e0-4478-b165-c2bf798e4692",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38ebd1cf-87ed-40f4-b397-759e38127d34",
                "b6c22bf4-0a8f-460d-8006-25c085337bc3",
                "62230d90-2b13-4514-86e0-7986121495c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 919,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1b136a4-95db-4d1e-8988-03367efe58c8",
              "title": "GET /auth/profile",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\auth.spec.cjs",
              "file": "\\tests\\api\\auth.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should require authentication",
                  "fullTitle": "Authentication API GET /auth/profile should require authentication",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "client.clearAuth();\nconst response = await client.get('/auth/profile');\n\nexpect(response.status).to.equal(401);",
                  "err": {},
                  "uuid": "b52e8cb5-4eb7-449c-a710-03dde17115ba",
                  "parentUUID": "a1b136a4-95db-4d1e-8988-03367efe58c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return user profile when authenticated",
                  "fullTitle": "Authentication API GET /auth/profile should return user profile when authenticated",
                  "timedOut": false,
                  "duration": 368,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First login\nconst loginResponse = await client.post('/auth/login', {\n  email: USER_CREDENTIALS.email,\n  password: USER_CREDENTIALS.password\n});\n\nclient.setBearerToken(loginResponse.data.token);\n\n// Then get profile\nconst profileResponse = await client.get('/auth/profile');\n\nexpect(profileResponse.status).to.equal(200);\nexpect(profileResponse.data).to.have.property('user');\nexpect(profileResponse.data.user).to.have.property('id');\nexpect(profileResponse.data.user).to.have.property('email', USER_CREDENTIALS.email);",
                  "err": {},
                  "uuid": "df1415ff-e207-4704-95d2-e4c9f3273bbc",
                  "parentUUID": "a1b136a4-95db-4d1e-8988-03367efe58c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b52e8cb5-4eb7-449c-a710-03dde17115ba",
                "df1415ff-e207-4704-95d2-e4c9f3273bbc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 371,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4c3aafed-b060-4df0-96e7-081954f4dde1",
          "title": "Bookings API",
          "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\bookings.spec.cjs",
          "file": "\\tests\\api\\bookings.spec.cjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Bookings API\"",
              "fullTitle": "Bookings API \"before each\" hook in \"Bookings API\"",
              "timedOut": false,
              "duration": 311,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await delay(300);",
              "err": {},
              "uuid": "b0f6c282-9d8f-4e5e-b065-da4dabde8438",
              "parentUUID": "4c3aafed-b060-4df0-96e7-081954f4dde1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7ce3b840-b4e7-47af-96e1-c1121ea35b7a",
              "title": "POST /bookings",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\bookings.spec.cjs",
              "file": "\\tests\\api\\bookings.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow guest to create booking",
                  "fullTitle": "Bookings API POST /bookings should allow guest to create booking",
                  "timedOut": false,
                  "duration": 33,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "client.clearAuth(); // Ensure no auth\n\nconst tomorrow = new Date();\ntomorrow.setDate(tomorrow.getDate() + 1);\nconst dayAfter = new Date();\ndayAfter.setDate(dayAfter.getDate() + 2);\n\nconst bookingData = {\n  vehicleId: 'bike-1',\n  rentalType: 'location',\n  fromDate: tomorrow.toISOString(),\n  toDate: dayAfter.toISOString(),\n  pickupLocation: 'Test Location',\n  dropoffLocation: 'Test Destination',\n  totalFare: 1500.00,\n  paymentMethod: 'cash',\n  customerName: 'Test Guest',\n  customerPhone: '0771234567',\n  customerEmail: 'guest@example.com'\n};\nconst response = await client.post('/bookings', bookingData);\n\nexpect(response.status).to.equal(201);\nexpect(response.data).to.have.property('booking');\nexpect(response.data.booking).to.have.property('id');\n\n// Validate against schema\nconst isValid = validateSchema(bookingCreatedSchema, response.data);\nexpect(isValid.valid).to.be.true;",
                  "err": {
                    "message": "AssertionError: expected 409 to equal 201",
                    "estack": "AssertionError: expected 409 to equal 201\n    at Context.<anonymous> (tests\\api\\bookings.spec.cjs:48:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 409\n+ 201\n"
                  },
                  "uuid": "29f1d41d-f332-4154-bada-a927543e0bd4",
                  "parentUUID": "7ce3b840-b4e7-47af-96e1-c1121ea35b7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject booking with invalid payload",
                  "fullTitle": "Bookings API POST /bookings should reject booking with invalid payload",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidBookingData = {\n  vehicle_id: 'invalid', // Should be number\n  pickup_location: '', // Should not be empty\n  // Missing required fields\n};\nconst response = await client.post('/bookings', invalidBookingData);\n\nexpect(response.status).to.equal(400);\nexpect(response.data).to.have.property('error');",
                  "err": {},
                  "uuid": "44c8f92f-f7fb-41c9-a5d5-1b9ff6cbcab5",
                  "parentUUID": "7ce3b840-b4e7-47af-96e1-c1121ea35b7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject booking with past dates",
                  "fullTitle": "Bookings API POST /bookings should reject booking with past dates",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pastDate = new Date();\npastDate.setDate(pastDate.getDate() - 1);\n\nconst bookingData = {\n  vehicle_id: 1,\n  pickup_location: 'Test Pickup Location',\n  dropoff_location: 'Test Dropoff Location',\n  pickup_time: pastDate.toISOString(),\n  dropoff_time: getFutureDate(1),\n  guest_name: 'John Doe',\n  guest_phone: '+1234567890',\n  guest_email: 'john.doe@example.com'\n};\nconst response = await client.post('/bookings', bookingData);\n\nexpect(response.status).to.equal(400);\nexpect(response.data).to.have.property('error');",
                  "err": {},
                  "uuid": "76342438-6f59-4900-bdd9-6248abae78ea",
                  "parentUUID": "7ce3b840-b4e7-47af-96e1-c1121ea35b7a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44c8f92f-f7fb-41c9-a5d5-1b9ff6cbcab5",
                "76342438-6f59-4900-bdd9-6248abae78ea"
              ],
              "failures": [
                "29f1d41d-f332-4154-bada-a927543e0bd4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 59,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a901de5-7fa1-49f3-9f03-fd86e7bc8ab7",
              "title": "GET /bookings",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\bookings.spec.cjs",
              "file": "\\tests\\api\\bookings.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should require authentication",
                  "fullTitle": "Bookings API GET /bookings should require authentication",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "client.clearAuth();\nconst response = await client.get('/bookings');\n\nexpect(response.status).to.equal(401);",
                  "err": {},
                  "uuid": "cf014d6c-cf74-42da-8420-5b292035e42b",
                  "parentUUID": "6a901de5-7fa1-49f3-9f03-fd86e7bc8ab7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should list user bookings when authenticated",
                  "fullTitle": "Bookings API GET /bookings should list user bookings when authenticated",
                  "timedOut": false,
                  "duration": 372,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "await loginAsUser();\n\nconst response = await client.get('/bookings');\n\nexpect(response.status).to.equal(200);\nexpect(response.data).to.have.property('bookings');\nexpect(response.data.bookings).to.be.an('array');",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 200",
                    "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (tests\\api\\bookings.spec.cjs:105:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 500\n+ 200\n"
                  },
                  "uuid": "996e2351-0935-4bc4-acd1-ee94fa7ef27a",
                  "parentUUID": "6a901de5-7fa1-49f3-9f03-fd86e7bc8ab7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf014d6c-cf74-42da-8420-5b292035e42b"
              ],
              "failures": [
                "996e2351-0935-4bc4-acd1-ee94fa7ef27a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 376,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0eebc5a4-f8ad-4cc3-9557-b45620b4439d",
              "title": "GET /bookings/:id",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\bookings.spec.cjs",
              "file": "\\tests\\api\\bookings.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should require authentication",
                  "fullTitle": "Bookings API GET /bookings/:id should require authentication",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "client.clearAuth();\nconst response = await client.get('/bookings/1');\n\nexpect(response.status).to.equal(401);",
                  "err": {},
                  "uuid": "fe4a0ce8-4806-469b-aa00-8ab42f4e4b3c",
                  "parentUUID": "0eebc5a4-f8ad-4cc3-9557-b45620b4439d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for non-existent booking",
                  "fullTitle": "Bookings API GET /bookings/:id should return 404 for non-existent booking",
                  "timedOut": false,
                  "duration": 421,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await loginAsUser();\n\nconst response = await client.get('/bookings/999999');\n\nexpect(response.status).to.equal(404);",
                  "err": {},
                  "uuid": "c162d57c-43e2-4ce6-9478-b90d70181fa0",
                  "parentUUID": "0eebc5a4-f8ad-4cc3-9557-b45620b4439d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe4a0ce8-4806-469b-aa00-8ab42f4e4b3c",
                "c162d57c-43e2-4ce6-9478-b90d70181fa0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 424,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9e328521-303c-4931-ba9c-f011668223a4",
          "title": "Parameterized Tests - Vehicles API",
          "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\params.spec.cjs",
          "file": "\\tests\\api\\params.spec.cjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Parameterized Tests - Vehicles API\"",
              "fullTitle": "Parameterized Tests - Vehicles API \"before each\" hook in \"Parameterized Tests - Vehicles API\"",
              "timedOut": false,
              "duration": 314,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await delay(300);",
              "err": {},
              "uuid": "c22d6b32-ed16-4411-ad3c-885d7edb7321",
              "parentUUID": "9e328521-303c-4931-ba9c-f011668223a4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4fe212ec-446e-42cc-a413-eac62dc96b2c",
              "title": "Vehicle Type Filtering",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\params.spec.cjs",
              "file": "\\tests\\api\\params.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should filter vehicles by type: car",
                  "fullTitle": "Parameterized Tests - Vehicles API Vehicle Type Filtering should filter vehicles by type: car",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?type=${type}`);\n      expect(response.status).to.equal(200);\n      expect(response.data).to.have.property('vehicles');\n      expect(response.data.vehicles).to.be.an('array');\n\n// All returned vehicles should match the requested type\nresponse.data.vehicles.forEach(vehicle => {\n  expect(vehicle.type).to.equal(type);\n});",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:17:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "953cdcb4-ec41-4ade-86be-2aa1c3665afd",
                  "parentUUID": "4fe212ec-446e-42cc-a413-eac62dc96b2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter vehicles by type: bike",
                  "fullTitle": "Parameterized Tests - Vehicles API Vehicle Type Filtering should filter vehicles by type: bike",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?type=${type}`);\n      expect(response.status).to.equal(200);\n      expect(response.data).to.have.property('vehicles');\n      expect(response.data.vehicles).to.be.an('array');\n\n// All returned vehicles should match the requested type\nresponse.data.vehicles.forEach(vehicle => {\n  expect(vehicle.type).to.equal(type);\n});",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:17:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "18a54226-e80e-41ef-b05f-43f6119f8831",
                  "parentUUID": "4fe212ec-446e-42cc-a413-eac62dc96b2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter vehicles by type: van",
                  "fullTitle": "Parameterized Tests - Vehicles API Vehicle Type Filtering should filter vehicles by type: van",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?type=${type}`);\n      expect(response.status).to.equal(200);\n      expect(response.data).to.have.property('vehicles');\n      expect(response.data.vehicles).to.be.an('array');\n\n// All returned vehicles should match the requested type\nresponse.data.vehicles.forEach(vehicle => {\n  expect(vehicle.type).to.equal(type);\n});",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:17:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "a16fd9ed-e8db-44a7-808f-60c53d50d931",
                  "parentUUID": "4fe212ec-446e-42cc-a413-eac62dc96b2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter vehicles by type: lorry",
                  "fullTitle": "Parameterized Tests - Vehicles API Vehicle Type Filtering should filter vehicles by type: lorry",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?type=${type}`);\n      expect(response.status).to.equal(200);\n      expect(response.data).to.have.property('vehicles');\n      expect(response.data.vehicles).to.be.an('array');\n\n// All returned vehicles should match the requested type\nresponse.data.vehicles.forEach(vehicle => {\n  expect(vehicle.type).to.equal(type);\n});",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:17:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "bf2bd3fd-4de9-487f-b1e9-b14fa36e22c3",
                  "parentUUID": "4fe212ec-446e-42cc-a413-eac62dc96b2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter vehicles by type: threewheel",
                  "fullTitle": "Parameterized Tests - Vehicles API Vehicle Type Filtering should filter vehicles by type: threewheel",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?type=${type}`);\n      expect(response.status).to.equal(200);\n      expect(response.data).to.have.property('vehicles');\n      expect(response.data.vehicles).to.be.an('array');\n\n// All returned vehicles should match the requested type\nresponse.data.vehicles.forEach(vehicle => {\n  expect(vehicle.type).to.equal(type);\n});",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:17:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "4d6fe90b-2d5d-431a-a185-89d2ad46888d",
                  "parentUUID": "4fe212ec-446e-42cc-a413-eac62dc96b2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "953cdcb4-ec41-4ade-86be-2aa1c3665afd",
                "18a54226-e80e-41ef-b05f-43f6119f8831",
                "a16fd9ed-e8db-44a7-808f-60c53d50d931",
                "bf2bd3fd-4de9-487f-b1e9-b14fa36e22c3",
                "4d6fe90b-2d5d-431a-a185-89d2ad46888d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d12d26ed-8c19-4a07-a23d-bac6997a82d3",
              "title": "Availability Filtering",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\params.spec.cjs",
              "file": "\\tests\\api\\params.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should filter vehicles by availability: true",
                  "fullTitle": "Parameterized Tests - Vehicles API Availability Filtering should filter vehicles by availability: true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?available=${available}`);\n      expect(response.status).to.equal(200);\n      expect(response.data).to.have.property('vehicles');\n      expect(response.data.vehicles).to.be.an('array');\n\n// Check if there are matching vehicles, if not, just verify the structure\nif (response.data.vehicles.length > 0) {\n  response.data.vehicles.forEach(vehicle => {\n    expect(vehicle.available).to.equal(available);\n  });\n}",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:33:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "f59dc4a1-de93-4594-ad7d-80643f8ba481",
                  "parentUUID": "d12d26ed-8c19-4a07-a23d-bac6997a82d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter vehicles by availability: false",
                  "fullTitle": "Parameterized Tests - Vehicles API Availability Filtering should filter vehicles by availability: false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?available=${available}`);\n      expect(response.status).to.equal(200);\n      expect(response.data).to.have.property('vehicles');\n      expect(response.data.vehicles).to.be.an('array');\n\n// Check if there are matching vehicles, if not, just verify the structure\nif (response.data.vehicles.length > 0) {\n  response.data.vehicles.forEach(vehicle => {\n    expect(vehicle.available).to.equal(available);\n  });\n}",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:33:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "d33745c7-aff7-4aa9-af38-3f552478db76",
                  "parentUUID": "d12d26ed-8c19-4a07-a23d-bac6997a82d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f59dc4a1-de93-4594-ad7d-80643f8ba481",
                "d33745c7-aff7-4aa9-af38-3f552478db76"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6341a81c-6d32-4c76-b524-d3227d3ca814",
              "title": "Combined Parameters",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\params.spec.cjs",
              "file": "\\tests\\api\\params.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should filter vehicles by type: car and availability: true",
                  "fullTitle": "Parameterized Tests - Vehicles API Combined Parameters should filter vehicles by type: car and availability: true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?type=${type}&available=${available}`);\n      expect(response.status).to.equal(200);\n      expect(response.data).to.have.property('vehicles');\n      expect(response.data.vehicles).to.be.an('array');\n\n// Check if there are matching vehicles, if not, just verify the structure\nif (response.data.vehicles.length > 0) {\n  response.data.vehicles.forEach(vehicle => {\n    expect(vehicle.type).to.equal(type);\n    expect(vehicle.available).to.equal(available);\n  });\n}",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:59:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "e6b63005-d0a8-48b6-a85e-7eef54cc57eb",
                  "parentUUID": "6341a81c-6d32-4c76-b524-d3227d3ca814",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter vehicles by type: bike and availability: false",
                  "fullTitle": "Parameterized Tests - Vehicles API Combined Parameters should filter vehicles by type: bike and availability: false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?type=${type}&available=${available}`);\n      expect(response.status).to.equal(200);\n      expect(response.data).to.have.property('vehicles');\n      expect(response.data.vehicles).to.be.an('array');\n\n// Check if there are matching vehicles, if not, just verify the structure\nif (response.data.vehicles.length > 0) {\n  response.data.vehicles.forEach(vehicle => {\n    expect(vehicle.type).to.equal(type);\n    expect(vehicle.available).to.equal(available);\n  });\n}",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:59:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "b0dc6a07-0d26-428f-99fe-65b76f400e43",
                  "parentUUID": "6341a81c-6d32-4c76-b524-d3227d3ca814",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter vehicles by type: van and availability: true",
                  "fullTitle": "Parameterized Tests - Vehicles API Combined Parameters should filter vehicles by type: van and availability: true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?type=${type}&available=${available}`);\n      expect(response.status).to.equal(200);\n      expect(response.data).to.have.property('vehicles');\n      expect(response.data.vehicles).to.be.an('array');\n\n// Check if there are matching vehicles, if not, just verify the structure\nif (response.data.vehicles.length > 0) {\n  response.data.vehicles.forEach(vehicle => {\n    expect(vehicle.type).to.equal(type);\n    expect(vehicle.available).to.equal(available);\n  });\n}",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:59:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "58318d15-9ddd-4e41-9f8d-188996f2b766",
                  "parentUUID": "6341a81c-6d32-4c76-b524-d3227d3ca814",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter vehicles by type: lorry and availability: false",
                  "fullTitle": "Parameterized Tests - Vehicles API Combined Parameters should filter vehicles by type: lorry and availability: false",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?type=${type}&available=${available}`);\n      expect(response.status).to.equal(200);\n      expect(response.data).to.have.property('vehicles');\n      expect(response.data.vehicles).to.be.an('array');\n\n// Check if there are matching vehicles, if not, just verify the structure\nif (response.data.vehicles.length > 0) {\n  response.data.vehicles.forEach(vehicle => {\n    expect(vehicle.type).to.equal(type);\n    expect(vehicle.available).to.equal(available);\n  });\n}",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:59:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "d3e52f57-2f93-465d-b392-b0ac9519bcde",
                  "parentUUID": "6341a81c-6d32-4c76-b524-d3227d3ca814",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "e6b63005-d0a8-48b6-a85e-7eef54cc57eb",
                "b0dc6a07-0d26-428f-99fe-65b76f400e43",
                "58318d15-9ddd-4e41-9f8d-188996f2b766",
                "d3e52f57-2f93-465d-b392-b0ac9519bcde"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ecbdcb58-2e85-4cd1-8fba-da1aca3f90c9",
              "title": "Invalid Parameters",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\params.spec.cjs",
              "file": "\\tests\\api\\params.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for invalid vehicle type: 'invalid_type'",
                  "fullTitle": "Parameterized Tests - Vehicles API Invalid Parameters should return 400 for invalid vehicle type: 'invalid_type'",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?type=${invalidType}`);\n\nexpect(response.status).to.equal(400);\nexpect(response.data).to.have.property('error');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:80:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "ce1571d5-cde9-4f48-aa98-e54655fa9e30",
                  "parentUUID": "ecbdcb58-2e85-4cd1-8fba-da1aca3f90c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid vehicle type: 'airplane'",
                  "fullTitle": "Parameterized Tests - Vehicles API Invalid Parameters should return 400 for invalid vehicle type: 'airplane'",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?type=${invalidType}`);\n\nexpect(response.status).to.equal(400);\nexpect(response.data).to.have.property('error');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:80:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "6e24ed0b-8f34-4fd5-a3b0-2e6b16309f53",
                  "parentUUID": "ecbdcb58-2e85-4cd1-8fba-da1aca3f90c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid vehicle type: 'boat'",
                  "fullTitle": "Parameterized Tests - Vehicles API Invalid Parameters should return 400 for invalid vehicle type: 'boat'",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?type=${invalidType}`);\n\nexpect(response.status).to.equal(400);\nexpect(response.data).to.have.property('error');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:80:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "d0cea9fd-d009-4f2e-b3b8-c8b688be8b0a",
                  "parentUUID": "ecbdcb58-2e85-4cd1-8fba-da1aca3f90c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid vehicle type: ''",
                  "fullTitle": "Parameterized Tests - Vehicles API Invalid Parameters should return 400 for invalid vehicle type: ''",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get(`/vehicles?type=${invalidType}`);\n\nexpect(response.status).to.equal(400);\nexpect(response.data).to.have.property('error');",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:80:43)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "78039d55-c023-48bf-9e2d-178f9e05bd8f",
                  "parentUUID": "ecbdcb58-2e85-4cd1-8fba-da1aca3f90c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ce1571d5-cde9-4f48-aa98-e54655fa9e30",
                "6e24ed0b-8f34-4fd5-a3b0-2e6b16309f53",
                "d0cea9fd-d009-4f2e-b3b8-c8b688be8b0a",
                "78039d55-c023-48bf-9e2d-178f9e05bd8f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1b6863ec-c9df-4c19-a98f-de0bf44c26fc",
              "title": "Edge Cases",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\params.spec.cjs",
              "file": "\\tests\\api\\params.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle empty results gracefully",
                  "fullTitle": "Parameterized Tests - Vehicles API Edge Cases should handle empty results gracefully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Try to find a combination that likely returns no results\nconst response = await httpClient.get('/vehicles?type=car&available=false');\n\nexpect(response.status).to.equal(200);\nexpect(response.data).to.have.property('vehicles');\nexpect(response.data.vehicles).to.be.an('array');\n// Results might be empty, which is valid",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:91:41)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "108ef045-f88e-4387-8d8d-0f80252196db",
                  "parentUUID": "1b6863ec-c9df-4c19-a98f-de0bf44c26fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle multiple same parameters",
                  "fullTitle": "Parameterized Tests - Vehicles API Edge Cases should handle multiple same parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get('/vehicles?type=car&type=bike');\n\n// Should either use the last parameter or return an error\nexpect([200, 400]).to.include(response.status);",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:100:41)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "ce1b2efa-de6c-410a-8969-b38d0af15352",
                  "parentUUID": "1b6863ec-c9df-4c19-a98f-de0bf44c26fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown parameters",
                  "fullTitle": "Parameterized Tests - Vehicles API Edge Cases should ignore unknown parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await httpClient.get('/vehicles?type=car&unknown_param=value');\n\nexpect(response.status).to.equal(200);\nexpect(response.data).to.have.property('vehicles');\nexpect(response.data.vehicles).to.be.an('array');\n\n// Should filter by type and ignore unknown parameter\nresponse.data.vehicles.forEach(vehicle => {\n  expect(vehicle.type).to.equal('car');\n});",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'get')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'get')\n    at Context.<anonymous> (tests\\api\\params.spec.cjs:107:41)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "5134dfc5-e499-4507-b05f-cac1a41948e2",
                  "parentUUID": "1b6863ec-c9df-4c19-a98f-de0bf44c26fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "108ef045-f88e-4387-8d8d-0f80252196db",
                "ce1b2efa-de6c-410a-8969-b38d0af15352",
                "5134dfc5-e499-4507-b05f-cac1a41948e2"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "613d0983-448c-4211-bf42-aed268f612aa",
          "title": "Error Handling and Logging Examples",
          "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\reporting-and-logging.spec.cjs",
          "file": "\\tests\\api\\reporting-and-logging.spec.cjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "72d355be-84c0-4374-bf9d-d69f02a2b705",
              "title": "404 Error Handling",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\reporting-and-logging.spec.cjs",
              "file": "\\tests\\api\\reporting-and-logging.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle 404 errors with proper logging and context",
                  "fullTitle": "Error Handling and Logging Examples 404 Error Handling should handle 404 errors with proper logging and context",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const startTime = Date.now();\nconst nonExistentEndpoint = '/api/non-existent-endpoint';\n\ntry {\n  const response = await client.get(nonExistentEndpoint);\n  const endTime = Date.now();\n  const responseTime = endTime - startTime;\n  \n  // Log request details for debugging\n  console.log('Request Details:', {\n    endpoint: nonExistentEndpoint,\n    method: 'GET',\n    responseTime: `${responseTime}ms`,\n    status: response.status,\n    timestamp: new Date().toISOString()\n  });\n  \n  // Verify 404 status\n  expect(response.status).to.equal(404);\n  \n  // Verify error response structure\n  expect(response.data).to.have.property('error');\n  expect(response.data.error).to.be.a('string');\n  \n  // Log error details\n  console.log('Error Response:', {\n    error: response.data.error,\n    status: response.status,\n    headers: response.headers\n  });\n  \n  // Verify response time is reasonable (less than 5 seconds)\n  expect(responseTime).to.be.lessThan(5000);\n  \n} catch (error) {\n  const endTime = Date.now();\n  const responseTime = endTime - startTime;\n  \n  // Log failure context for debugging\n  console.error('Test Failure Context:', {\n    endpoint: nonExistentEndpoint,\n    error: error.message,\n    responseTime: `${responseTime}ms`,\n    timestamp: new Date().toISOString(),\n    stack: error.stack\n  });\n  \n  // Re-throw to fail the test\n  throw error;\n}",
                  "err": {},
                  "uuid": "c56c5b25-2c8c-4fdb-a3f3-c5d4978117a6",
                  "parentUUID": "72d355be-84c0-4374-bf9d-d69f02a2b705",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c56c5b25-2c8c-4fdb-a3f3-c5d4978117a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2ddc9cf9-1f96-4970-b8c7-ecfc2221e202",
              "title": "Request Timeout Handling",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\reporting-and-logging.spec.cjs",
              "file": "\\tests\\api\\reporting-and-logging.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle slow responses appropriately",
                  "fullTitle": "Error Handling and Logging Examples Request Timeout Handling should handle slow responses appropriately",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const startTime = Date.now();\n\ntry {\n  // Test with a potentially slow endpoint\n  const response = await client.get('/vehicles', {\n    timeout: 8000 // 8 second timeout\n  });\n  \n  const endTime = Date.now();\n  const responseTime = endTime - startTime;\n  \n  console.log('Performance Metrics:', {\n    endpoint: '/vehicles',\n    responseTime: `${responseTime}ms`,\n    status: response.status,\n    dataSize: JSON.stringify(response.data).length,\n    timestamp: new Date().toISOString()\n  });\n  \n  expect(response.status).to.equal(200);\n  \n  // Log warning if response is slow\n  if (responseTime > 3000) {\n    console.warn('SLOW RESPONSE WARNING:', {\n      endpoint: '/vehicles',\n      responseTime: `${responseTime}ms`,\n      threshold: '3000ms',\n      recommendation: 'Consider optimizing this endpoint'\n    });\n  }\n  \n} catch (error) {\n  const endTime = Date.now();\n  const responseTime = endTime - startTime;\n  \n  console.error('Request Failed:', {\n    endpoint: '/vehicles',\n    error: error.message,\n    responseTime: `${responseTime}ms`,\n    errorCode: error.code,\n    timestamp: new Date().toISOString()\n  });\n  \n  // If it's a timeout, that's expected behavior\n  if (error.code === 'ECONNABORTED') {\n    console.log('Request timed out as expected');\n  } else {\n    throw error;\n  }\n}",
                  "err": {},
                  "uuid": "9cbd5ca5-b257-4865-b8bd-ecfa58057d32",
                  "parentUUID": "2ddc9cf9-1f96-4970-b8c7-ecfc2221e202",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9cbd5ca5-b257-4865-b8bd-ecfa58057d32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "32928e3f-e6ea-414a-bfd5-adb9d0e1ddf7",
              "title": "Error Response Validation",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\reporting-and-logging.spec.cjs",
              "file": "\\tests\\api\\reporting-and-logging.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate error response format for invalid requests",
                  "fullTitle": "Error Handling and Logging Examples Error Response Validation should validate error response format for invalid requests",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidRequests = [\n  { endpoint: '/vehicles?type=invalid_type', expectedStatus: 400 },\n  { endpoint: '/vehicles/999999', expectedStatus: 404 },\n  { endpoint: '/bookings', expectedStatus: 401 } // Without auth\n];\n\nfor (const { endpoint, expectedStatus } of invalidRequests) {\n  const startTime = Date.now();\n  \n  try {\n    const response = await client.get(endpoint);\n    const endTime = Date.now();\n    const responseTime = endTime - startTime;\n    \n    console.log(`Testing ${endpoint}:`, {\n      expectedStatus,\n      actualStatus: response.status,\n      responseTime: `${responseTime}ms`,\n      hasError: !!response.data.error\n    });\n    \n    expect(response.status).to.equal(expectedStatus);\n    \n    // Verify error response structure\n    if (response.status >= 400) {\n      expect(response.data).to.have.property('error');\n      expect(response.data.error).to.be.a('string');\n      expect(response.data.error.length).to.be.greaterThan(0);\n    }\n    \n  } catch (error) {\n    console.error(`Error testing ${endpoint}:`, {\n      error: error.message,\n      expectedStatus,\n      timestamp: new Date().toISOString()\n    });\n    throw error;\n  }\n}",
                  "err": {},
                  "uuid": "efa3d8b9-62d9-4a14-a8fa-1c71dd21d870",
                  "parentUUID": "32928e3f-e6ea-414a-bfd5-adb9d0e1ddf7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "efa3d8b9-62d9-4a14-a8fa-1c71dd21d870"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e032f922-e882-4293-b5f7-604f9d8d5470",
              "title": "API Health Monitoring",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\reporting-and-logging.spec.cjs",
              "file": "\\tests\\api\\reporting-and-logging.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should monitor API health and log metrics",
                  "fullTitle": "Error Handling and Logging Examples API Health Monitoring should monitor API health and log metrics",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const healthChecks = [\n  '/vehicles',\n  '/auth/login',\n  '/health'\n];\n\nconst results = [];\n\nfor (const endpoint of healthChecks) {\n  const startTime = Date.now();\n  \n  try {\n    const response = await client.get(endpoint);\n    const endTime = Date.now();\n    const responseTime = endTime - startTime;\n    \n    const result = {\n      endpoint,\n      status: response.status,\n      responseTime,\n      healthy: response.status < 500,\n      timestamp: new Date().toISOString()\n    };\n    \n    results.push(result);\n    \n    console.log('Health Check:', result);\n    \n  } catch (error) {\n    const endTime = Date.now();\n    const responseTime = endTime - startTime;\n    \n    const result = {\n      endpoint,\n      status: 'ERROR',\n      responseTime,\n      healthy: false,\n      error: error.message,\n      timestamp: new Date().toISOString()\n    };\n    \n    results.push(result);\n    \n    console.error('Health Check Failed:', result);\n  }\n}\n\n// Summary report\nconst healthyEndpoints = results.filter(r => r.healthy).length;\nconst totalEndpoints = results.length;\nconst averageResponseTime = results.reduce((sum, r) => sum + (r.responseTime || 0), 0) / totalEndpoints;\n\nconsole.log('Health Summary:', {\n  healthyEndpoints: `${healthyEndpoints}/${totalEndpoints}`,\n  healthPercentage: `${((healthyEndpoints / totalEndpoints) * 100).toFixed(1)}%`,\n  averageResponseTime: `${averageResponseTime.toFixed(0)}ms`,\n  timestamp: new Date().toISOString()\n});\n\n// At least some endpoints should be healthy\nexpect(healthyEndpoints).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "ff1ff839-1150-4a84-a486-cb9761b37306",
                  "parentUUID": "e032f922-e882-4293-b5f7-604f9d8d5470",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff1ff839-1150-4a84-a486-cb9761b37306"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "564ad5dd-d21a-4543-94ea-e649e6613fda",
          "title": "Vehicles API",
          "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\vehicles.spec.cjs",
          "file": "\\tests\\api\\vehicles.spec.cjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Vehicles API\"",
              "fullTitle": "Vehicles API \"before each\" hook in \"Vehicles API\"",
              "timedOut": false,
              "duration": 310,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await delay(300);",
              "err": {},
              "uuid": "791f70c7-f2ee-4b89-8c02-0f46f9868b93",
              "parentUUID": "564ad5dd-d21a-4543-94ea-e649e6613fda",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9c3530dc-350f-4e09-926e-3e4ccf6b745b",
              "title": "GET /vehicles",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\vehicles.spec.cjs",
              "file": "\\tests\\api\\vehicles.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return list of vehicles",
                  "fullTitle": "Vehicles API GET /vehicles should return list of vehicles",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Add delay to avoid rate limiting\n     const response = await client.get('/vehicles');\n     expect(response.status).to.equal(200);",
                  "err": {},
                  "uuid": "18ebf9a4-37df-4689-84d7-ad837c55b199",
                  "parentUUID": "9c3530dc-350f-4e09-926e-3e4ccf6b745b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return correct headers",
                  "fullTitle": "Vehicles API GET /vehicles should return correct headers",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.get('/vehicles');\nexpect(response.headers['content-type']).to.include('application/json');",
                  "err": {},
                  "uuid": "3da60983-e67a-46c4-89ff-96909c0b6a75",
                  "parentUUID": "9c3530dc-350f-4e09-926e-3e4ccf6b745b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return valid vehicles list schema",
                  "fullTitle": "Vehicles API GET /vehicles should return valid vehicles list schema",
                  "timedOut": false,
                  "duration": 85,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.get('/vehicles');\nexpect(response.status).to.equal(200);\nexpect(response.data).to.have.property('vehicles');\nexpect(validateSchema(vehiclesListSchema, response.data.vehicles)).to.be.true;",
                  "err": {
                    "message": "AssertionError: expected false to be true",
                    "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (tests\\api\\vehicles.spec.cjs:29:79)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- false\n+ true\n"
                  },
                  "uuid": "e9379beb-2aef-4520-9e9c-ebbbb51f9683",
                  "parentUUID": "9c3530dc-350f-4e09-926e-3e4ccf6b745b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter by vehicle type",
                  "fullTitle": "Vehicles API GET /vehicles should filter by vehicle type",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.get('/vehicles?type=car');\nexpect(response.status).to.equal(200);\nexpect(response.data).to.have.property('vehicles');\nexpect(response.data.vehicles).to.be.an('array');\n// All returned vehicles should be cars\nresponse.data.vehicles.forEach(vehicle => {\n  expect(vehicle.type).to.equal('car');\n});",
                  "err": {},
                  "uuid": "956560a7-8612-4c08-9a53-8e86ea96bcd8",
                  "parentUUID": "9c3530dc-350f-4e09-926e-3e4ccf6b745b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter by availability",
                  "fullTitle": "Vehicles API GET /vehicles should filter by availability",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.get('/vehicles?available=true');\nexpect(response.status).to.equal(200);\nexpect(response.data).to.have.property('vehicles');\nexpect(response.data.vehicles).to.be.an('array');\n// All returned vehicles should be available\nresponse.data.vehicles.forEach(vehicle => {\n  expect(vehicle.available).to.be.true;\n});",
                  "err": {},
                  "uuid": "6ee5d0ab-8dd0-4add-9702-c6222c9b2eb4",
                  "parentUUID": "9c3530dc-350f-4e09-926e-3e4ccf6b745b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid vehicle type",
                  "fullTitle": "Vehicles API GET /vehicles should return 400 for invalid vehicle type",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "try {\n  await client.get('/vehicles?type=invalid');\n  expect.fail('Should have thrown an error');\n} catch (error) {\n  expect(error.response).to.exist;\n  expect(error.response.status).to.equal(400);\n}",
                  "err": {
                    "message": "AssertionError: expected undefined to exist",
                    "estack": "AssertionError: expected undefined to exist\n    at Context.<anonymous> (tests\\api\\vehicles.spec.cjs:59:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "f09d21a5-3db4-4670-a806-f870d04d4d96",
                  "parentUUID": "9c3530dc-350f-4e09-926e-3e4ccf6b745b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18ebf9a4-37df-4689-84d7-ad837c55b199",
                "3da60983-e67a-46c4-89ff-96909c0b6a75",
                "956560a7-8612-4c08-9a53-8e86ea96bcd8",
                "6ee5d0ab-8dd0-4add-9702-c6222c9b2eb4"
              ],
              "failures": [
                "e9379beb-2aef-4520-9e9c-ebbbb51f9683",
                "f09d21a5-3db4-4670-a806-f870d04d4d96"
              ],
              "pending": [],
              "skipped": [],
              "duration": 127,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5f831678-4b45-4e33-9be3-fd9cb4df8bd5",
              "title": "GET /vehicles/:id",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\vehicles.spec.cjs",
              "file": "\\tests\\api\\vehicles.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return single vehicle details",
                  "fullTitle": "Vehicles API GET /vehicles/:id should return single vehicle details",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Add delay to avoid rate limiting\n     const response = await client.get('/vehicles/bike-1');\n     expect(response.status).to.equal(200);\n     expect(response.data).to.have.property('vehicle');\n     expect(response.data.vehicle).to.have.property('id');\n     expect(response.data.vehicle.id).to.equal('bike-1');",
                  "err": {},
                  "uuid": "7cf7b890-a772-4242-b43e-aabdfa2d654a",
                  "parentUUID": "5f831678-4b45-4e33-9be3-fd9cb4df8bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for non-existent vehicle",
                  "fullTitle": "Vehicles API GET /vehicles/:id should return 404 for non-existent vehicle",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "try {\n  await client.get('/vehicles/non-existent');\n  expect.fail('Should have thrown an error');\n} catch (error) {\n  expect(error.response).to.exist;\n  expect(error.response.status).to.equal(404);\n  expect(error.response.data).to.have.property('error');\n}",
                  "err": {
                    "message": "AssertionError: expected undefined to exist",
                    "estack": "AssertionError: expected undefined to exist\n    at Context.<anonymous> (tests\\api\\vehicles.spec.cjs:79:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "45a0f474-ba46-41e9-9b21-251dfa0f3541",
                  "parentUUID": "5f831678-4b45-4e33-9be3-fd9cb4df8bd5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7cf7b890-a772-4242-b43e-aabdfa2d654a"
              ],
              "failures": [
                "45a0f474-ba46-41e9-9b21-251dfa0f3541"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "73d57cf9-0147-4194-9afd-0c4120012b73",
          "title": "XML Response Validation",
          "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\xml.spec.cjs",
          "file": "\\tests\\api\\xml.spec.cjs",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"XML Response Validation\"",
              "fullTitle": "XML Response Validation \"before each\" hook in \"XML Response Validation\"",
              "timedOut": false,
              "duration": 312,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await delay(300);",
              "err": {},
              "uuid": "57b0a3c8-221f-4fb0-b5c8-dcf1e1796f47",
              "parentUUID": "73d57cf9-0147-4194-9afd-0c4120012b73",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a4910a94-afdf-44bb-8f9f-dc5dfe02d37c",
              "title": "Vehicles Endpoint",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\xml.spec.cjs",
              "file": "\\tests\\api\\xml.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle XML or JSON response from /vehicles endpoint",
                  "fullTitle": "XML Response Validation Vehicles Endpoint should handle XML or JSON response from /vehicles endpoint",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.get('/vehicles');\n\nexpect(response.status).to.equal(200);\n\nconst contentType = response.headers['content-type'] || '';\n\nif (contentType.includes('application/xml') || contentType.includes('text/xml')) {\n  // Handle XML response\n  expect(response.data).to.be.a('string');\n  \n  // Parse XML and validate structure\n  const parsedXml = parseXml(response.data);\n  expect(parsedXml).to.be.an('object');\n  \n  // Expect vehicles-related information\n  // This depends on your actual XML structure\n  console.log('Parsed XML:', JSON.stringify(parsedXml, null, 2));\n  \n} else if (contentType.includes('application/json')) {\n  // Handle JSON response\n  expect(response.data).to.be.an('object');\n  expect(response.data).to.have.property('vehicles');\n  expect(response.data.vehicles).to.be.an('array');\n  \n} else {\n  // Handle plain text or other formats\n  expect(response.data).to.exist;\n  console.log('Vehicles response:', response.data);\n}",
                  "err": {},
                  "uuid": "4be734ce-ce9b-4da9-a8e4-2ad56ab86b13",
                  "parentUUID": "a4910a94-afdf-44bb-8f9f-dc5dfe02d37c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4be734ce-ce9b-4da9-a8e4-2ad56ab86b13"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "daad3553-6056-495f-b658-b8c264bbff98",
              "title": "XML Parsing Examples",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\xml.spec.cjs",
              "file": "\\tests\\api\\xml.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse simple XML correctly",
                  "fullTitle": "XML Response Validation XML Parsing Examples should parse simple XML correctly",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const xmlString = `\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <response>\n    <status>success</status>\n    <message>API is healthy</message>\n    <timestamp>2024-01-15T10:30:00Z</timestamp>\n  </response>\n`;\n\nconst parsed = parseXml(xmlString);\n\nexpect(parsed).to.have.property('response');\nexpect(parsed.response).to.have.property('status', 'success');\nexpect(parsed.response).to.have.property('message', 'API is healthy');\nexpect(parsed.response).to.have.property('timestamp');",
                  "err": {},
                  "uuid": "fd2977e3-9ab5-40a2-8f50-44ffaf518bee",
                  "parentUUID": "daad3553-6056-495f-b658-b8c264bbff98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse XML with attributes",
                  "fullTitle": "XML Response Validation XML Parsing Examples should parse XML with attributes",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const xmlString = `\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <vehicles count=\"3\">\n    <vehicle id=\"1\" type=\"car\">\n      <name>Toyota Camry</name>\n      <available>true</available>\n    </vehicle>\n    <vehicle id=\"2\" type=\"bike\">\n      <name>Honda CBR</name>\n      <available>false</available>\n    </vehicle>\n  </vehicles>\n`;\n\nconst parsed = parseXml(xmlString);\n\nexpect(parsed).to.have.property('vehicles');\nexpect(parsed.vehicles).to.have.property('@_count', '3');\nexpect(parsed.vehicles).to.have.property('vehicle');\nexpect(parsed.vehicles.vehicle).to.be.an('array');\nexpect(parsed.vehicles.vehicle[0]).to.have.property('@_id', '1');\nexpect(parsed.vehicles.vehicle[0]).to.have.property('@_type', 'car');",
                  "err": {},
                  "uuid": "42a4f5e7-8a8f-464f-a41d-172d59a97d20",
                  "parentUUID": "daad3553-6056-495f-b658-b8c264bbff98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle XML parsing errors gracefully",
                  "fullTitle": "XML Response Validation XML Parsing Examples should handle XML parsing errors gracefully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const invalidXml = '<invalid><unclosed>';\n\nexpect(() => {\n  parseXml(invalidXml);\n}).to.throw('Failed to parse XML');",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw an error",
                    "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (tests\\api\\xml.spec.cjs:97:18)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "1e79bca6-7930-4123-9249-11a24e47a646",
                  "parentUUID": "daad3553-6056-495f-b658-b8c264bbff98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd2977e3-9ab5-40a2-8f50-44ffaf518bee",
                "42a4f5e7-8a8f-464f-a41d-172d59a97d20"
              ],
              "failures": [
                "1e79bca6-7930-4123-9249-11a24e47a646"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "31df7301-7b14-4064-8cc4-e8ab3521acdf",
              "title": "API Endpoints with XML Support",
              "fullFile": "C:\\Users\\think\\OneDrive\\Documents\\TaxiBooking\\TaxiBooking\\project\\tests\\api\\xml.spec.cjs",
              "file": "\\tests\\api\\xml.spec.cjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should request XML format if supported",
                  "fullTitle": "XML Response Validation API Endpoints with XML Support should request XML format if supported",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.get('/vehicles', {\n  headers: {\n    'Accept': 'application/xml'\n  }\n});\n\n// The API might not support XML, so we handle both cases\nif (response.status === 200) {\n  const contentType = response.headers['content-type'] || '';\n  \n  if (contentType.includes('xml')) {\n    // XML response received\n    const parsed = parseXml(response.data);\n    expect(parsed).to.be.an('object');\n    console.log('XML vehicles response structure:', Object.keys(parsed));\n  } else {\n    // JSON response (API doesn't support XML)\n    expect(response.data).to.have.property('vehicles');\n    expect(response.data.vehicles).to.be.an('array');\n    console.log('API returned JSON instead of XML (XML not supported)');\n  }\n} else {\n  console.log('API endpoint not available or doesn\\'t support XML');\n}",
                  "err": {},
                  "uuid": "045f0cce-026e-4019-9f59-5f73ab13e9c9",
                  "parentUUID": "31df7301-7b14-4064-8cc4-e8ab3521acdf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "045f0cce-026e-4019-9f59-5f73ab13e9c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "api-test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test-results",
        "reportFilename": "api-test-report"
      },
      "version": "6.2.0"
    }
  }
}